---
- name: Create Docker network for stack
  docker_network:
    name: "{{ stack_config.network_name }}"
    state: present

- name: Pull Docker images for stack (optional)
  docker_image:
    name: "{{ services[item].image }}"
    tag: "{{ services[item].version }}"
    source: pull
    state: present
  loop: "{{ stack_services }}"
  when: 
    - services[item].enabled | default(true)
    - stack_pull_images | default(false)
  register: image_pull_result

- name: Display image pull results
  debug:
    msg: "Pulled {{ services[item.item].image }}:{{ services[item.item].version }}"
  loop: "{{ image_pull_result.results }}"
  when: 
    - image_pull_result is defined
    - item.changed | default(false)

- name: Stop existing stack (if running)
  community.docker.docker_compose_v2:
    project_src: "{{ stack_config.base_path }}"
    state: absent
  ignore_errors: yes
  tags: ['never', 'force-restart']

- name: Start stack with docker-compose
  community.docker.docker_compose_v2:
    project_src: "{{ stack_config.base_path }}"
    build: never
    state: present
    pull: missing
    remove_orphans: yes
  register: compose_result

- name: Display docker-compose results
  debug:
    var: compose_result.services
  when: compose_result.changed

- name: Ensure all enabled services are running
  docker_container_info:
    name: "{{ item }}"
  register: container_info
  loop: "{{ stack_services }}"
  when: services[item].enabled | default(false)
  failed_when: 
    - container_info.exists
    - container_info.container.State.Status != "running"

- name: Create systemd service for stack
  template:
    src: "{{ stack_systemd_template | default(role_path + '/templates/systemd/docker-stack.service.j2') }}"
    dest: "/etc/systemd/system/{{ stack_name }}.service"
    mode: '0644'
  notify:
    - reload systemd
    - "enable {{ stack_name }} service"

- name: Start and enable stack service
  systemd:
    name: "{{ stack_name }}"
    state: started
    enabled: yes
    daemon_reload: yes
